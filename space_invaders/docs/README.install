INSTALLATION PROCEDURE

*** NOTE ***
The present version of the code adopts the installation procedure of PWSFC 
(for more details see also www.pwscf.org)

*** WARNING ***
This installation procedure is still experimental, and only a limited
number of architectures are currently supported.

Installation is a two-step procedure:

1) "cd" to the top directory of the WanT tree (that should be the one
   where this file is), and issue this command at the shell prompt:

     ./configure

2) Now run:

     make target

   where "target" is one (or more) of the following:

    window disentangle wannier hamiltonian plot bulk conductor

   Running "make" without arguments prints a list of available
   targets.

Cross-compilation isn't currently supported.  It might be at some
point in the future, but only if we get enough requests (or even
better, some volunteers!).

----------------------------------------------------------------------
First step : configuring
----------------------------------------------------------------------

"configure" is a GNU-style configuration script, automatically
generated by GNU Autoconf.  (If you want to play with it, its source
file is "configure.ac"; you may also want to edit "make.sys.in" and
"make.rules.in".)  It generates the following files:

  $TOPDIR/make.sys           compilation settings and flags
  $TOPDIR/make.rules         compilation rules
  $TOPDIR/*/.dependencies    dependencies, per source directory

where $TOPDIR is the top directory of the PWscf source tree.

".dependencies" files are actually generated by the "makedeps.sh"
shell script.  If you modify the program sources, you might have to
rerun it.  Note that you must run it from the directory it is in.

To force using a particular compiler, or compilation flags, or
libraries, you may set the appropriate environment variables when
running the configuration script.  For example:

  ./configure CC=gcc CFLAGS=-O3 LIBS="-llapack -lblas -lfftw"

Some of those environment variables are:

  TOPDIR       : top directory of the PWscf tree (defaults to `pwd`)
  F90, F77, CC : Fortran 90, Fortran 77, and C compilers
  CPP          : source file preprocessor (defaults to "$CC -E")
  LD           : linker (defaults to $F90)
  CFLAGS, FFLAGS, F90FLAGS, CPPFLAGS, LDFLAGS : compilation flags
  LIBDIRS      : extra directories to search for libraries (see below)

You should always be able to compile the PWscf suite of programs
without having to edit any of the generated files.  If you ever have
to, that should be considered a bug in the configuration script and
you are encouraged to submit a bug report.

*** IMPORTANT ***
WanT can take advantage of several optimized numerical libraries:
- ESSL on AIX systems (shipped by IBM)
- MKL together with Intel compilers (shipped by Intel, free for
  non-commercial use)
- ATLAS (freely downloadable from http://math-atlas.sourceforge.net/)
- FFTW (freely downloadable from http://www.fftw.org/)

The configuration script attempts to find those libraries, but may
fail if they have been installed in non-standard locations.  You
should look at the LIBS environment variable (either in the output of
the configuration script, or in the generated "make.sys") to check
whether all available libraries were found.

If any libraries weren't found, you can rerun the configuration script
and pass it a list of directories to search, by setting the
environment variable LIBDIRS; directories in the list must
be separated by spaces.  For example:

  ./configure LIBDIRS="/opt/intel/mkl/mkl61/lib/32 /usr/local/lib/fftw-2.1.5"

If this still fails, you may set the environment variable LIBS
manually and retry.  For example:

  ./configure LIBS="-L/cineca/prod/intel/lib -lfftw -llapack -lblas"

Beware that in this case, you must specify *all* the libraries that
you want to link to.  The configuration script will blindly accept the
specified value, and will *not* search for any extra libraries.

If you want to use the FFTW library, the "fftw.h" include file is also
required.  If the configuration script wasn't able to find it, you can
specify the correct directory in the INCLUDEFFTW environment variable.
For example:

  ./configure INCLUDEFFTW="/cineca/lib/fftw-2.1.3/fftw"

----------------------------------------------------------------------
Second step : compiling
----------------------------------------------------------------------

Here is a list of available compilation targets:

  make all          compile Main/disentangle.x    (step 1), 
                            Main/wannier.x        (step 2), 
                            Main/bands.x          (post proc), 
                            Main/plot.x           (post proc), 
                            Main/blc2wan.x        (post proc), 
                            Transport/conductor.x (lead-conductor-lead conductance)
  make clean        remove object files and executables
  make veryclean    remove configuration files too

*** IMPORTANT ***
If you change any compilation or precompilation options
after a previous (successful or failed) compilation, you must run
"make clean" before recompiling, unless you know exactly which
routines are affected by the changed options and how to force their
recompilation.

