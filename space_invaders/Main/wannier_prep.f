       SUBROUTINE WANNIER_PREP(EMAX,FLGPSD,IGUESS,EPSPSI,
     2     NG,KGV,PHASER,PHASEI,CONJ,NS,INDS,KMAX,INDV,EK,
     3     SR,SI,VEFFR,VEFFI,ICMPLX,VKB,NKB,
     5     NTYPE,NATOM,RAT,ADOT,VIONR,VIONI,VHXCR,VHXCI,
     6     HDIAG,KISORT,QMOD,EKPG,XVECR,XVECI,XVECR_K,XVECI_K,
     6     EI_K,NFILE,INDXFROZ,INDXNFROZ,MTXD_K,NEIG_K,
     6     DIMFROZ,FROZEN,NQNL,DELQNL,
     6     EI,HAMSMR,HAMSMI,ANLGAR,ANLGAI,XNLKB,VSCR,KMSCR,
     9     WRK,WRK1,WRK2,IWRKV1,TVECR,TVECI,TEY,
     2     HXVECR,HXVECI,BASR,BASI,HBASR,HBASI,VSMR,VSMI,
     3     IWRKV2,WRKRV,CHDR,CHDI,WRK8,ZERO,
     4     MXDTYP,MXDATM,MXDLQP,MXDDIM,MXDANL,MXDBND,MXDFFT,
     5     MXDWRK,MXDSML,MXDNRK,MXDNST,IPRGLOB,
     5     NK,S,WIN_MIN,WIN_MAX,FROZ_MIN,FROZ_MAX,DIMWANN)

C  
C      PREPARE OUTPUT FOR WANNIER FUNCTION CALCULATION 
C      A.R. and M.B.N. (APRIL 2002)
C
C      DIMENSIONS FOR HAMILTONIAN DIAGONALIZATION
C
       IMPLICIT NONE
C
       INTEGER MXDTYP,MXDATM,MXDLQP,MXDDIM,MXDANL,MXDNRK
       INTEGER MXDBND,MXDFFT,MXDWRK,MXDSML,MXDNST
       REAL*8 EMAX,RKPT(3),ZERO
       INTEGER NEIG,ICMPLX,MTXD,IGUESS,IPRGLOB
       CHARACTER*6 FLGPSD
C
       INTEGER NG,NS
       INTEGER KISORT(MXDDIM,MXDNRK)
       INTEGER KGV(3,NG),INDS(NG),KMAX(3),INDV(1)
       REAL*8 PHASER(NG),PHASEI(NG),CONJ(NG),EK(NS)
       REAL*8 SR(MXDTYP,NS),SI(MXDTYP,NS)
       INTEGER NQNL(MXDTYP),NKB(4,MXDTYP)
       REAL*8 DELQNL(MXDTYP),VKB(MXDLQP,4,MXDTYP)
       REAL*8 VEFFR(NS),VEFFI(NS)
       INTEGER NTYPE,NATOM(MXDTYP)
       REAL*8 ADOT(3,3),RAT(3,MXDATM,MXDTYP)
C
       REAL*8 VIONR(MXDNST),VIONI(MXDNST)
       REAL*8 VHXCR(MXDNST),VHXCI(MXDNST)
C
       REAL*8 EI(MXDDIM)
       INTEGER ISORT(MXDDIM)
       REAL*8 HDIAG(MXDDIM),QMOD(MXDDIM),EKPG(MXDDIM)
C
       REAL*8 HAMSMR(MXDSML*MXDSML),HAMSMI(MXDSML*MXDSML)
       REAL*8 ANLGAR(MXDDIM,MXDANL),ANLGAI(MXDDIM,MXDANL)
       REAL*8 XNLKB(MXDANL)
       REAL*8 WRK(MXDATM),WRK1(MXDATM),WRK2(NG)
       INTEGER IWRKV1(NG),IWRKV2(MXDDIM)
       REAL*8 VSCR(MXDFFT),KMSCR(3)
       REAL*8 TVECR(MXDSML,MXDSML),TVECI(MXDSML,MXDSML),TEY(MXDSML)
       REAL*8 HXVECR(MXDDIM,MXDBND),HXVECI(MXDDIM,MXDBND)
       REAL*8 BASR(MXDDIM,MXDSML),HBASR(MXDDIM,MXDSML)
       REAL*8 BASI(MXDDIM,MXDSML),HBASI(MXDDIM,MXDSML)
       REAL*8 VSMR(MXDSML,MXDSML),VSMI(MXDSML,MXDSML)
       REAL*8 WRKRV(10*MXDSML)
       REAL*8 WRK8(MXDWRK),CHDR(MXDFFT),CHDI(MXDFFT)
C
       INTEGER IPR,IFAIL,NDUM
       REAL*8 EPSPSI
       REAL*8 EPS
       PARAMETER ( EPS = 1.0D-20 )

       REAL*8 T0,TOUT

C
C      WANNIER-RELATED VARIABLES
C      *************************
C
C      NK(I)      DIMENSION OF K-POINT GRID ALONG THE I-TH
C                 RECIPROCAL LATTICE VECTOR
C      S(I)       OFFSET OF K-POINT GRID ALONG THE I-TH RECIPROCAL 
C                 LATTICE VECTOR IN UNITS OF THAT VECTOR
C      DIMWANN    dimensionality of the subspace at each k-point 
C                 (number of Wannier functions per unit cell that we want)
C      WIN_MIN,WIN_MAX  ENERGY WINDOW IS [WIN_MIN,WIN_MAX] (eV)
C      FROZ_MIN,FROZ_MAX FROZEN ENERGY WINDOW IS [FROZ_MIN,FROZ_MAX] (eV)
C      KIFROZ_MIN INDEX OF THE LOWEST EIGENSTATE INSIDE THE INNER WINDOW
C                 AT THE PRESENT K-POINT (W.R.T. THE LOWEST EIGENSTATE INSIDE 
C                 THE OUTER WINDOW)
C      KIFROZ_MAX INDEX OF THE HIGHEST EIGENSTATE INSIDE THE INNER WINDOW
C                 AT THE PRESENT K-POINT (W.R.T. THE LOWEST EIGENSTATE INSIDE 
C                 THE OUTER WINDOW)
C      XVECR(I,J) REAL PART OF THE I-TH PLANE WAVE COMPONENT OF THE J-TH
C                 EIGENVECTOR AT THE PRESENT K-POINT (ACCORDING TO THE
C                 ORDERING OF THE G-VECTORS AT THAT K-POINT)
C      XVECI(I,J) IMAGINARY PART OF THE I-TH PLANE WAVE COMPONENT OF THE J-TH
C                 EIGENVECTOR AT THE PRESENT K-POINT (ACCORDING TO THE
C                 ORDERING OF THE G-VECTORS AT THAT K-POINT)
C      ISORT(I)   G-VECTOR ASSOCIATED WITH ROW/COLUMN I OF HAMILTONIAN AT
C                 THE PRESENT K-POINT
C      NFILE(NKP) USED TO GENERATE THE NAME OF THE FILE CONTAINING THE
C                 WAVE FUNCTIONS AT THE NKP-TH K-POINT
C      NKPINMAX   MAXIMUM NUMBER OF K-POINTS WHERE PINNING DOWN OF BANDS OCCURS
C      PIN_K(I,J) I-TH COMPONENT IN RECIPROCAL LATTICE COORDINATES OF THE J-TH
C                 K-POINT WHERE PINNING OCCURS (AS ORDERED IN PIN.DAT) 
C      IKPIN(I,J) I-TH INDEX (IN THE ORDERING OF THE K-POINTS ON THE UNIFORM 
C                 GRID) OF THE J-TH PINNING K-POINT 
C      IBND_PIN(J,I) INDEX (IN THE ORDERING OF THE BANDS) OF THE J-TH PINNED
C                    DOWN BAND AT THE I-TH PINNING K-POINT
C      N_PINNED(I) NUMBER OF PINNED DOWN BANDS AT THE I-TH PINNING K-POINT
C      INDXFROZ(I,NKP) INDEX OF THE I-TH FROZEN BAND AT THE NKP-TH K-POINT
C                      (W.R.T. THE LOWEST BAND INSIDE OUTER WINDOW)
C      INDXNFROZ(I,NKP) INDEX OF THE I-TH NON-FROZEN BAND AT THE NKPTH K-POINT 
C                       (W.R.T. THE LOWEST BAND INSIDE OUTER WINDOW)
C      DIMFROZ(NKP)     NUMBER OF FROZEN BANDS AT THE NKP-TH K-POINT
C      FROZEN(I,NKP)    TRUE IF THE I-TH BAND (W.R.T. THE LOWEST BAND INSIDE 
C                       OUTER WINDOW) AT THE NKP-TH K-POINT IS FROZEN, FALSE
C                       OTHERWISE
C
C
C      DIMENSIONS FOR WANNIER-RELATED VARIABLES
C
       INTEGER DIMWANN,NKPINMAX,I,J,NKPIN,I1,I2,I3,IFOUND
       PARAMETER(NKPINMAX=24)

       INTEGER NK(3),NKP, NKP_tot
       INTEGER IKPIN(3,NKPINMAX),IBND_PIN(500,NKPINMAX)
       INTEGER N_PINNED(NKPINMAX),NFILE(MXDNRK)
       INTEGER INDXFROZ(MXDBND,MXDNRK),INDXNFROZ(MXDBND,MXDNRK)
       INTEGER MTXD_K(MXDNRK),NEIG_K(MXDNRK)
       INTEGER DIMFROZ(MXDNRK)

       REAL*8 WIN_MIN, WIN_MAX, FROZ_MIN, FROZ_MAX
       REAL*8 S(3),XVECR(MXDDIM,MXDBND),XVECI(MXDDIM,MXDBND)
       REAL*8 PIN_K(3,NKPINMAX)
c      REAL*8 XVECR_K(MXDDIM,MXDBND,MXDNRK)
c      REAL*8 XVECI_K(MXDDIM,MXDBND,MXDNRK)
       REAL*8 XVECR_K(1,1,1)
       REAL*8 XVECI_K(1,1,1)
       REAL*8 EI_K(MXDDIM,MXDNRK)

       LOGICAL FROZEN(MXDBND,MXDNRK)
C
C
C      CALCULATES EIGENVECTORS ON A UNIFORM GRID
C      *****************************************
C
C      THE OUTPUT FILES ARE USED AS INPUT FOR THE WANNIER CALCULATION
C
C      READS THE NUMBER OF POINTS ON THE UNIFORM GRID ALONG
C      EACH OF THE RECIPROCAL LATTICE VECTORS, OFFSET OF THE MESH,
C      ENERGY WINDOWS, AND DESIRED NUMBER OF BANDS/WFs
C
       IF(NK(1)*NK(2)*NK(3).GT.MXDNRK) THEN
         WRITE(6,*) 'GRID IS ',NK(1),'x',NK(2),'x',NK(3),'=',
     1   NK(1)*NK(2)*NK(3),' > MXDNRK = ',MXDNRK
         WRITE(6,*) '*** INCREASE MXDNRK ***'
         STOP
       ENDIF
       IF(WIN_MAX.LE.WIN_MIN) THEN
         WRITE(6,*) '*** ERROR *** ENERGY WINDOW'
         WRITE(6,*) 'WIN_MAX IS NOT LARGER THAN WIN_MIN'
         STOP
       ENDIF


       IF(FROZ_MAX.EQ.FROZ_MIN) THEN

C PINNING DOWN OF ENERGY BANDS AT SELECTED K-POINTS IS IN EFFECT

          WRITE(6,*) ' '
          WRITE(6,*) '*************************'                       
          WRITE(6,*) 'PINNING DOWN ENERGY BANDS'
          WRITE(6,*) '*************************'                       
          OPEN(UNIT=4,FILE='PIN.DAT',STATUS='OLD',FORM='FORMATTED')
          READ(4,*) NKPIN
          DO I=1,NKPIN
             READ(4,*) PIN_K(1,I),PIN_K(2,I),PIN_K(3,I),N_PINNED(I)
             READ(4,*) (IBND_PIN(J,I),J=1,N_PINNED(I))
             WRITE(6,234) PIN_K(1,I),PIN_K(2,I),PIN_K(3,I)
 234         FORMAT(/,'PINNING K-POINT: ',3(F6.3,1X))
             WRITE(6,235) N_PINNED(I),(IBND_PIN(J,I),J=1,N_PINNED(I))
 235         FORMAT(I3,1X,'PINNED BANDS: ',12(I2,1X))
          ENDDO

C CHECK THAT THE SELECTED K-POINTS ARE PART OF THE UNIFORM GRID

          DO I=1,NKPIN
             IFOUND=0
             DO I1=0,NK(1)-1
             DO I2=0,NK(2)-1
             DO I3=0,NK(3)-1
                IF(ABS(DBLE(I1)/DBLE(NK(1))-PIN_K(1,I)).LT.1.E-8.AND.
     1             ABS(DBLE(I2)/DBLE(NK(2))-PIN_K(2,I)).LT.1.E-8.AND. 
     2             ABS(DBLE(I3)/DBLE(NK(3))-PIN_K(3,I)).LT.1.E-8)
     3          THEN
                   IFOUND=1
                   IKPIN(1,I)=I1
                   IKPIN(2,I)=I2
                   IKPIN(3,I)=I3
                ENDIF
             ENDDO
             ENDDO
             ENDDO
             IF(IFOUND.EQ.0) THEN
                WRITE(6,*) 'ERROR TRYING TO PIN DOWN BANDS'
                WRITE(6,*) 'SELECTED K-POINT #',I,'NOT IN GRID'
                STOP
             ENDIF
          ENDDO

       ENDIF

C WRITES ICMPLX, GRID INFORMATION, AND G-VECTORS

       OPEN(UNIT=7,FILE='KG_GRIDS.DAT',STATUS='UNKNOWN',
     1 FORM='FORMATTED')
       WRITE(7,*) (NK(I),I=1,3),(S(I),I=1,3),NG
       WRITE(7,*) ((KGV(I,J),I=1,3),J=1,NG)
       CLOSE(7)
C
C        CALCULATES LOCAL POTENTIAL IN FFT MESH
C
C        DO I=1,NS
C          VEFFR(I) = VIONR(I) + VHXCR(I)
C          VEFFI(I) = VIONI(I) + VHXCI(I)
C        ENDDO
C        VEFFR(1) = ZERO
C        VEFFI(1) = ZERO
C
         IPR = 0
         IF(IPRGLOB .GE. 2) IPR = 1
         IF(IPRGLOB .EQ. 4) IPR = 2
C
         CALL POT_LOCAL(IPR,VSCR,
     2   VEFFR,VEFFI,KMSCR,
     1   NG,KGV,PHASER,PHASEI,CONJ,
     2   INDS,NS,
     3   CHDI,WRK8,
     4   MXDFFT,MXDWRK)
C
C LOOP OVER K-POINT GRID
C
       OPEN (unit=53,FILE='vec.in',status='unknown',FORM='UNFORMATTED')
       NKP=0
       DO I1=0,NK(1)-1
       DO I2=0,NK(2)-1
       DO I3=0,NK(3)-1
         NKP=NKP+1
         RKPT(1)=DFLOAT(I1)/DFLOAT(NK(1))+S(1)
         RKPT(2)=DFLOAT(I2)/DFLOAT(NK(2))+S(2)
         RKPT(3)=DFLOAT(I3)/DFLOAT(NK(3))+S(3)
C
C
C          CALCULATES HAMILTONIAN AND DIAGONALIZES
C          ***************************************
C
C
           IGUESS = 0
           EPSPSI=0.0002
           NEIG = MXDBND
C
           CALL HKBDIA(EMAX,RKPT,NEIG,FLGPSD,IGUESS,EPSPSI,
     2     NG,KGV,PHASER,PHASEI,CONJ,
     2     NS,INDS,KMAX,INDV,EK,
     3     SR,SI,VEFFR,VEFFI,ICMPLX,
     4     NQNL,DELQNL,VKB,NKB,
     5     NTYPE,NATOM,RAT,ADOT,
     6     MTXD,HDIAG,KISORT(1,NKP),QMOD,EKPG,
     6     XVECR,XVECI,EI,
     7     HAMSMR,HAMSMI,
     8     ANLGAR,ANLGAI,XNLKB,
     9     VSCR,KMSCR,
     9     WRK,WRK1,WRK2,IWRKV1,
     1     TVECR,TVECI,TEY,
     2     HXVECR,HXVECI,BASR,BASI,HBASR,HBASI,VSMR,VSMI,
     3     IWRKV2,WRKRV,CHDR,CHDI,WRK8,
     4     MXDTYP,MXDATM,MXDLQP,MXDDIM,MXDANL,MXDBND,MXDFFT,
     5     MXDWRK,MXDSML)

C    
C
C          END OF DIAGONALIZATION
C          **********************
C
       write(6,*)'I am storing wave function for kpoint',nkp
       write(53)((XVECR(I,J),I=1,MXDDIM),J=1,MXDBND)
       write(53)((XVECI(I,J),I=1,MXDDIM),J=1,MXDBND)

c      DO I=1,MXDDIM
c       DO J=1,MXDBND
c        XVECR_K(I,J,NKP)=XVECR(I,J)
c        XVECI_K(I,J,NKP)=XVECI(I,J)
c       ENDDO

       DO I=1,MXDDIM
        EI_K(I,NKP)=EI(I)
       ENDDO
       MTXD_K(NKP)=MTXD
       NEIG_K(NKP)=NEIG

c      write band structure if needed
c      write(6,*) rkpt(1),rkpt(2),rkpt(3)
c      do i=1,neig
c         write(6,*) 27.21152d0*EI(i)
c      end do
       
       ENDDO !I3
       ENDDO !I2
       ENDDO !I1

       CLOSE(53)

       NKP_tot=NK(1)*NK(2)*NK(3)

       OPEN (unit=54,FILE='val.in',status='unknown',FORM='UNFORMATTED')
       write(54)((KISORT(I,NKP),I=1,MXDDIM),NKP=1,NKP_tot)
       write(54)((EI_K(I,NKP),I=1,MXDDIM),NKP=1,NKP_tot)
       write(54)(MTXD_K(NKP),NKP=1,NKP_tot)
       write(54)(NEIG_K(NKP),NKP=1,NKP_tot)
       CLOSE(54)
C
       RETURN 
C
 100   FORMAT(2X,10F8.4)
 200   FORMAT(/,'  COMPUTING TIME FOR ITERATION ',I5,3X,F10.2)
 250   FORMAT(/,'  COMPUTING TIME FOR STARTING ',3X,F10.2,/)
 300   FORMAT('  TOTAL COMPUTING TIME  ',F10.2)
 400   FORMAT('  E= ',F12.6)
 500   FORMAT(4x,3f6.3)
       END
