! 
! Copyright (C) 2004 Andrea Ferretti
! 
! This file is distributed under the terms of the 
! GNU General Public License. See the file `License' 
! in the root directory of the present distribution, 
! or http://www.gnu.org/copyleft/gpl.txt . 
! 
! <INFO>
!*********************************************
   MODULE wfc_data_module
!*********************************************
   USE kinds
   USE parameters, ONLY : nstrx
   USE iotk_module
   USE io_module, ONLY : stdout, dft_unit, ovp_unit, ioname, pseudo_dir
   USE timing_module, ONLY : timing
   USE ions_module, ONLY : psfile
   USE files_module, ONLY : file_open, file_close
   
   USE lattice_module, ONLY : avec
   USE input_module, ONLY : gauss_typ, rphiimx1, rphiimx2, l_wann, rloc, m_wann, ndir_wann
   USE windows_module, ONLY : windows_alloc => alloc, dimwin, dimwinx, mxdbnd, dimfroz
   USE kpoints_module, ONLY : kpoints_alloc, bshells_alloc, nkpts, vkpt, mxdnn, &
                              nntot, nnlist, nncell
   USE overlap_module, ONLY : cm, ca, overlap_alloc => alloc, dimwann, overlap_write
   USE ggrids_module,  ONLY : npw, nr, ecutwfc, ecutrho, igv, &
                              ggrids_read_ext, ggrids_deallocate
   USE wfc_module, ONLY : npwkx, npwk, igsort, evc, &
                          wfc_read_ext, wfc_deallocate 
   IMPLICIT NONE
   PRIVATE
!
! This module contains a subroutine that permforms all the
! operations needed to obtain the internal data from DFT wfcs
! (OVERLAP and PROJECTIONS matrix elements).
!
! Interface:
! SUBROUTINE wfc_data()
!
! Tasks performed:
! * read and init G grids
! * read and init wfcs
! * compute the projections
! * compute the overlap
! * write overlap and projections to file
! * waste ggrids and wfcs data
!
! </INFO>

   PUBLIC :: wfc_data

CONTAINS

!*********************************************************
   SUBROUTINE wfc_data(lamp)
   !*********************************************************
   IMPLICIT NONE
      COMPLEX(dbl), INTENT(out) :: lamp(:,:,:)
      CHARACTER(8)              :: subname="wfc_data"
      CHARACTER(nstrx)          :: filename
      INTEGER                   :: ierr, ik, idum
      INTEGER                   :: i, j 


      CALL timing('wfc_dat',OPR='start')

!
! ... Read ggrids and wfcs
!
      !
      ! ... opening the file containing the PW-DFT data
      CALL ioname('export',filename,LPOSTFIX=.FALSE.)
      CALL file_open(dft_unit,TRIM(filename),PATH="/",ACTION="read", &
                               FORM='formatted')
      !
      ! ... grids
      CALL ggrids_read_ext(dft_unit)

      !
      ! ... wfcs
      CALL wfc_read_ext(dft_unit)

      !
      ! ... closing the main data file
      CALL file_close(dft_unit,PATH="/",ACTION="read")

      CALL ioname('dft_data',filename,LPATH=.FALSE.,LPOSTFIX=.FALSE.)
      WRITE( stdout,"(/,'  WFC and GRIDS data read from file: ',a)") TRIM(filename)

!
! ... stdout summary about grids and wfcs
!
      WRITE(stdout, "(/)")
      WRITE(stdout, "(2x,70('='))" )
      WRITE(stdout, "(2x,'=',23x,'Overlap and Projections',23x,'=')" )
      WRITE(stdout, "(2x,70('='),/)" )
      WRITE(stdout, "(2x,'Kinetic energy cut-off for wfcs =  ', F7.2, ' (Ry)' )") ecutwfc
      WRITE(stdout, "(2x,'                       for rho  =  ', F7.2, ' (Ry)' )") ecutrho
      WRITE(stdout, "(2x,'Total number of PW for rho =  ', i9 )") npw
      WRITE(stdout, "(2x,'Max number of PW for wfcs =  ', i9 )") npwkx
      WRITE(stdout, "(2x,'FFT grid components (rho) =  ( ', 3i5,' )' )") nr(:)
      WRITE(stdout, "()")

!
! ... actual calculation 
!
      IF ( .NOT. kpoints_alloc) CALL errore(subname,'kpoints NOT alloc',2) 
      IF ( .NOT. bshells_alloc) CALL errore(subname,'bshells NOT alloc',3) 
      IF ( .NOT. windows_alloc) CALL errore(subname,'windows NOT alloc',4) 
      IF ( .NOT. overlap_alloc) CALL errore(subname,'overlap NOT alloc',5) 

      CALL overlap( igv, evc, igsort, npwk, dimwin,                        &
                    nntot, nnlist, nncell, cm, npw, npwkx, nkpts,          &
                    mxdnn, mxdbnd, nr(1), nr(2), nr(3), dimwinx )

       CALL projection( avec, lamp, ca, evc, vkpt,                               &
                        igv, igsort, npwk, dimwin, dimwann, dimfroz,             &
                        npwkx, mxdbnd, nkpts, npw, nr(1), nr(2), nr(3), nkpts,   &
                        gauss_typ, rphiimx1, rphiimx2, l_wann,                   &
                        m_wann, ndir_wann, rloc, dimwinx)

       !
       ! ... clean a large amount of memory
       CALL ggrids_deallocate()
       CALL wfc_deallocate()

!
! ...  writing projections and overlap on file
!

       CALL ioname('overlap_projection',filename)
       CALL file_open(ovp_unit,TRIM(filename),PATH="/",ACTION="write",FORM="formatted")
            CALL overlap_write(ovp_unit,"OVERLAP_PROJECTION")
       CALL file_close(ovp_unit,PATH="/",ACTION="write")

       CALL ioname('overlap_projection',filename,LPATH=.FALSE.)
       WRITE( stdout,"(/,'  Overlap and projections written on file: ',a)") TRIM(filename)


       CALL timing('wfc_dat',OPR='stop')
       RETURN
   END SUBROUTINE wfc_data

END MODULE wfc_data_module

